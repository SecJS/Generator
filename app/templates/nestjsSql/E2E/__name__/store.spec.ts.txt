import * as request from 'supertest'

import { Debug } from '@secjs/logger'
import { AppModule } from 'app/AppModule'
import { storePayload } from './constants'
import { App, Database } from 'test/Utils'

describe('\n[E2E] <%= namePascal %> ðŸ§±', () => {
  it('should create a new <%= nameCamel %>', async () => {
    const status = 201
    const method = 'POST'
    const code = 'RESPONSE'
    const path = '/<%= namePluralCamel %>'

    const { body } = await request(app.server.getHttpServer())
      .post(path)
      .send(storePayload)
      .expect(status)

    expect(body.code).toBe(code)
    expect(body.path).toBe(path)
    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
  })

  // Implement all properties in app/Contract/Dtos/<%= namePascal %>Dto.ts
  // And create tests to validate if the schema validator are working well.
})

let app: App
let database: Database

beforeEach(async () => {
  Debug(`Executing ${beforeEach.name}`)

  app = await new App([AppModule]).initApp()
  database = new Database(app)
})

afterEach(async () => {
  Debug(`Executing ${afterEach.name}`)

  await database.dropDatabase()
  await database.closeConnection()
  await app.closeApp()
})
