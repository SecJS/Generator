import * as request from 'supertest'

import { Debug } from '@secjs/logger'
import { AppModule } from 'app/AppModule'
import { App, Database } from 'test/Utils'
import { <%= namePascal %>Seeder } from 'database/seeds/<%= namePascal %>Seeder'

describe('\n[E2E] <%= namePascal %> ❌', () => {
  it('should delete one <%= nameCamel %>', async () => {
    const <%= nameCamel %> = await <%= nameCamel %>Seeder.seedOne()

    const status = 200
    const method = 'DELETE'
    const path = `/<%= namePluralCamel %>/${<%= nameCamel %>.id}`

    const { body } = await request(app.server.getHttpServer())
      .delete(path)
      .expect(status)

    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
    expect(body.data.id).toBe(<%= nameCamel %>.id)
    expect(body.data.deletedAt).toBeTruthy()
  })

  it('should throw a not found error when can not find <%= nameCamel %>', async () => {
    const status = 404
    const method = 'DELETE'
    const path = `/<%= namePluralCamel %>/507f1f77bcf86cd799439011`

    const { body } = await request(app.server.getHttpServer())
      .delete(path)
      .expect(status)

    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
    expect(body.error).toEqual({
      name: 'NotFoundException',
      message: {
        error: 'Not Found',
        message: 'NOT_FOUND_<%= nameUp %>',
        statusCode: status,
      },
    })
  })
})

let app: App
let database: Database
let <%= nameCamel %>Seeder: <%= namePascal %>Seeder

beforeEach(async () => {
  Debug(`Executing ${beforeEach.name}`, 'api:test')

  app = await new App([AppModule]).initApp()
  database = new Database(app)

  <%= nameCamel %>Seeder = app.getInstance(<%= namePascal %>Seeder)
})

afterEach(async () => {
  Debug(`Executing ${afterEach.name}`, 'api:test')

  await database.truncate()
  await database.truncateCache()
  await app.closeApp()
})
