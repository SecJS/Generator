import 'start/env'
import Log from 'start/debug'
import * as request from 'supertest'

import { AppModule } from 'app/AppModule'
import { App, Database } from 'test/Utils'
import { dbPayload, updatePayload } from './constants'
import { <%= namePascal %>Repository } from 'app/Repositories/<%= namePascal %>Repository'
import { IdentityCollection } from 'app/Services/Collections/IdentityCollection'

describe('\n[E2E] <%= namePascal %> ðŸ› ', () => {
  it('should update one <%= nameCamel %>', async () => {
    const <%= nameCamel %> = await <%= nameCamel %>Repository.storeOne(dbPayload)

    const status = 200
    const method = 'PUT'
    const code = 'RESPONSE'
    const path = `/<%= namePluralCamel %>/${<%= nameCamel %>.id}`

    const { body } = await request(app.server.getHttpServer())
      .put(path)
      .send(updatePayload)
      .set('Authorization', `Bearer ${accessToken}`)
      .expect(status)

    expect(body.code).toBe(code)
    expect(body.path).toBe(path)
    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
  })

  it('should throw a not found error', async () => {
    const status = 404
    const method = 'PUT'
    const code = 'Error'
    const path = '/<%= namePluralCamel %>/507f1f77bcf86cd799439011'

    const { body } = await request(app.server.getHttpServer())
      .put(path)
      .send(updatePayload)
      .set('Authorization', `Bearer ${accessToken}`)
      .expect(404)

    expect(body.code).toBe(code)
    expect(body.path).toBe(path)
    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
    expect(body.error).toEqual({
      name: 'Error',
      message: {
        error: 'Not Found',
        message: 'NOT_FOUND_<%= nameUp %>',
        statusCode: 404,
      },
    })
  })

  // Implement app/Contract/Dtos/<%= namePascal %>Dto.ts
  // Implement app/Validators/<%= namePascal %>Validator.ts
  // And create tests to validate if the Validators are working well.
})

let app: App
let database: Database
let <%= nameCamel %>Repository: <%= namePascal %>Repository

let accessToken: string
let identityCollection: IdentityCollection

beforeEach(async () => {
  Log.test(`Executing ${beforeEach.name}`)

  app = await new App([AppModule]).initApp()
  database = new Database(app)

  <%= nameCamel %>Repository = database.getRepository(<%= namePascal %>Repository)
  identityCollection = app.getInstance<IdentityCollection>(
      IdentityCollection.name,
    )

  const { access_token } = await identityCollection.getUserToken()

  accessToken = access_token
})

afterEach(async () => {
  Log.test(`Executing ${afterEach.name}`)

  await database.dropDatabase()
  await database.closeConnection()
  await app.closeApp()
})
