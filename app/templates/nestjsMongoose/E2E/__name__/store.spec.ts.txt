import * as request from 'supertest'

import { Debug } from '@secjs/logger'
import { AppModule } from 'app/AppModule'
import { App, Database } from 'test/Utils'
import { <%= namePascal %>Seeder } from 'database/seeds/<%= namePascal %>Seeder'

describe('\n[E2E] <%= namePascal %> ðŸ§±', () => {
  it('should create a new <%= nameCamel %>', async () => {
    const status = 201
    const method = 'POST'
    const path = `/<%= namePluralCamel %>`

    const storeBlueprint = <%= nameCamel %>Seeder.storeBlueprint()

    const { body } = await request(app.server.getHttpServer())
      .post(path)
      .send(storeBlueprint)
      .expect(status)

    expect(body.method).toBe(method)
    expect(body.status).toBe(status)
    expect(body.data.name).toBe(storeBlueprint.name)
  })

  // Implement all properties in app/Contracts/Dtos/<%= namePascal %>Dto.ts
  // And create tests to validate if the schema validator are working well.

  // it('should throw validation errors when trying to create a <%= nameCamel %> with validation errors', async () => {
  //   const status = 400
  //   const path = `/<%= namePluralCamel %>`
  //
  //   const { body } = await request(app.server.getHttpServer())
  //     .post(path)
  //     .send({})
  //     .expect(status)
  //
  //   expect(body.status).toBe(status)
  //   expect(body.error.message).toStrictEqual({
  //     name: 'Validation Error',
  //     statusCode: status,
  //     validations: ['"name" is required'],
  //   })
  // })
})

let app: App
let database: Database
let <%= nameCamel %>Seeder: <%= namePascal %>Seeder

beforeEach(async () => {
  Debug(`Executing ${beforeEach.name}`, 'api:test')

  app = await new App([AppModule]).initApp()
  database = new Database(app)

  <%= nameCamel %>Seeder = app.getInstance(<%= namePascal %>Seeder)
})

afterEach(async () => {
  Debug(`Executing ${afterEach.name}`, 'api:test')

  await database.truncate()
  await database.truncateCache()
  await app.closeApp()
})

